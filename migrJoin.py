#! /usr/bin/env python3
# coding: utf-8

import sys, subprocess, os, shutil, re, time

#main.
def main():
    checkInputs()
    cleanCurDir()
    extractFile()
    ora2pg()
    renameFile()
    cleanFile()
    cpMigrFile()

#checks command line parameters.
def checkInputs():
    global fileToM
    if(len(sys.argv) < 2):
        print("Nom du fichier à migrer manquant en paramètre. EX: python migrJoin.py LBS01_A1_A35/A2.sql")
    else:
        fileToM = sys.argv[1]

#clean current dir files for new migration.
def cleanCurDir():
    dir_name = "./"
    fileList = os.listdir(dir_name)

    for item in fileList:
        if item.endswith(".sql"):
            os.remove(os.path.join(dir_name, item))

#extract file name.
def extractFile():
    global toRen
    toRen = os.path.basename(fileToM)

#copy target oracle file.
def ora2pg():
    cmdMig = "ora2pg -p -c /etc/ora2pg/ora2pg.conf.dist -t QUERY -i /home/postgres/codeOracle/frame/" + fileToM
    subprocess.call(cmdMig, shell=True)

#rename output file from ora2pg.
def renameFile():
    os.rename('output.sql', toRen)

#clean file from extra text.
def cleanFile():
    tmpCpy = open("tmpfile.sql", "w+")
    with open(toRen) as fp:
        for line in fp:
            print(line)
            line = line.replace("-- Generated by Ora2Pg, the Oracle database Schema converter, version 18.1\n", '')
            line = line.replace("-- Copyright 2000-2017 Gilles DAROLD. All rights reserved.\n", '')
            line = line.replace("-- DATASOURCE: dbi:Oracle:host=mydb.mydom.fr;sid=SIDNAME\n", '')
            line = line.replace("SET client_encoding TO 'UTF8';\n", '')
            line = line.replace("\set ON_ERROR_STOP ON\n", '')
            line = line.replace(";\n", '')
            tmpCpy.write(line)
    tmpCpy.close()
    os.rename(toRen, toRen + "tmp")
    os.rename('tmpfile.sql', toRen)
    os.remove(toRen + "tmp")

#copy new migrated file to src/dev/frame...
def cpMigrFile():
    os.remove("/home/postgres/src/dev/frame/" + fileToM)
    shutil.copyfile(toRen, "/home/postgres/src/dev/frame/" + fileToM)

#call program.
if __name__ == "__main__":
    main()
